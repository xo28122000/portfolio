{"version":3,"sources":["screens/homescreen/index.js","screens/aboutscreen/index.js","screens/projectscreen/index.js","screens/contactscreen/index.js","App.js","serviceWorker.js","index.js"],"names":["HomeScreen","state","backgroundColor","projectsTextColor","aboutTextColor","contactTextColor","componentDidMount","projectText","document","getElementById","aboutText","contactText","onmouseover","setState","onmouseleave","id","style","this","className","height","textAlign","to","color","Component","AboutScreen","marginTop","marginBottom","fontSize","ProjectScreen","ContactScreen","App","TransitionGroup","path","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sVAyHeA,G,iNApHbC,MAAQ,CACNC,gBAAiB,UACjBC,kBAAmB,UACnBC,eAAgB,UAChBC,iBAAkB,W,EAEpBC,kBAAoB,WAClB,IAAMC,EAAcC,SAASC,eAAe,eACtCC,EAAYF,SAASC,eAAe,aACpCE,EAAcH,SAASC,eAAe,eAC5CF,EAAYK,YAAc,WACxB,EAAKC,SAAS,CACZX,gBAAiB,mBACjBE,eAAgB,2BAChBC,iBAAkB,2BAClBF,kBAAmB,aAGvBI,EAAYO,aAAe,WACzB,EAAKD,SAAS,CACZX,gBAAiB,UACjBE,eAAgB,UAChBD,kBAAmB,UACnBE,iBAAkB,aAGtBK,EAAUE,YAAc,WACtB,EAAKC,SAAS,CACZX,gBAAiB,mBACjBC,kBAAmB,2BACnBC,eAAgB,UAChBC,iBAAkB,8BAGtBK,EAAUI,aAAe,WACvB,EAAKD,SAAS,CACZX,gBAAiB,UACjBE,eAAgB,UAChBD,kBAAmB,UACnBE,iBAAkB,aAGtBM,EAAYC,YAAc,WACxB,EAAKC,SAAS,CACZX,gBAAiB,mBACjBC,kBAAmB,2BACnBC,eAAgB,2BAChBC,iBAAkB,aAGtBM,EAAYG,aAAe,WACzB,EAAKD,SAAS,CACZX,gBAAiB,UACjBC,kBAAmB,UACnBC,eAAgB,UAChBC,iBAAkB,c,wEAKtB,OACE,yBACEU,GAAG,WACHC,MAAO,CAAEd,gBAAiBe,KAAKhB,MAAMC,kBAErC,yBAAKgB,UAAU,kBAAkBF,MAAO,CAAEG,OAAQ,SAChD,yBAAKD,UAAU,+DACb,yBAAKA,UAAU,MAAMF,MAAO,CAAEI,UAAW,UACvC,kBAAC,IAAD,CAASC,GAAG,YACV,yBACEH,UAAU,aACVH,GAAG,cACHC,MAAO,CAAEM,MAAOL,KAAKhB,MAAME,oBAH7B,eAUN,yBAAKe,UAAU,+DACb,yBAAKA,UAAU,MAAMF,MAAO,CAAEI,UAAW,WACvC,kBAAC,IAAD,CAASC,GAAG,UACV,yBACEH,UAAU,aACVH,GAAG,YACHC,MAAO,CAAEM,MAAOL,KAAKhB,MAAMG,iBAH7B,YAUN,yBAAKc,UAAU,+DACb,yBAAKA,UAAU,MAAMF,MAAO,CAAEI,UAAW,QACvC,kBAAC,IAAD,CAASC,GAAG,YACV,yBACEH,UAAU,aACVH,GAAG,cACHC,MAAO,CAAEM,MAAOL,KAAKhB,MAAMI,mBAH7B,cAUN,yBAAKa,UAAU,kCACb,yBAAKA,UAAU,MAAMF,MAAO,CAAEI,UAAW,QAAzC,sB,GA3GaG,cCqDVC,G,iNAtDbvB,MAAQ,G,wEAEN,OACE,yBAAKc,GAAG,YAAYG,UAAU,aAC5B,yBACEF,MAAO,CAAEG,OAAQ,OAAQM,UAAW,OAAQC,aAAc,SAE1D,yBAAKR,UAAU,2CAA2CF,MAAO,IAC/D,yBAAKE,UAAU,OAAf,sBAGF,yBACEA,UAAU,kBACVF,MAAO,CAAEW,SAAU,kBAAmBF,UAAW,QAEjD,yBAAKP,UAAU,MAAMF,MAAO,IAA5B,QACO,6BADP,WAEU,6BAFV,oBAIE,6BAJF,qBAME,6BANF,sBAQE,6BARF,gCAWA,yBAAKE,UAAU,MAAMF,MAAO,IAC1B,yBAAKA,MAAO,CAAEU,aAAc,MAAOD,UAAW,QAA9C,gBACe,8BAEf,yBAAKT,MAAO,CAAEU,aAAc,MAAOD,UAAW,QAA9C,iBAEE,8BAEF,yBAAKT,MAAO,CAAEU,aAAc,MAAOD,UAAW,QAA9C,YAEE,8BAEF,yBAAKT,MAAO,CAAEU,aAAc,MAAOD,UAAW,QAA9C,8BAEE,8BAEF,yBAAKT,MAAO,CAAEU,aAAc,MAAOD,UAAW,QAA9C,iBAEE,sC,GA7CUF,cCMXK,E,2MANb3B,MAAQ,G,wEAEN,OAAO,4C,GAHiBsB,aCObM,E,2MANb5B,MAAQ,G,wEAEN,OAAO,4C,GAHiBsB,aCoCbO,E,2MA1Bb7B,MAAQ,G,wEAGN,OACE,kBAAC,IAAD,KACE,kBAAC8B,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,c,GAlBIC,IAAMV,WCEJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASC,eAAe,SD2H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6402b641.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport \"./style.css\";\nclass HomeScreen extends Component {\n  state = {\n    backgroundColor: \"#ffffff\",\n    projectsTextColor: \"#000000\",\n    aboutTextColor: \"#000000\",\n    contactTextColor: \"#000000\"\n  };\n  componentDidMount = () => {\n    const projectText = document.getElementById(\"projectText\");\n    const aboutText = document.getElementById(\"aboutText\");\n    const contactText = document.getElementById(\"contactText\");\n    projectText.onmouseover = () => {\n      this.setState({\n        backgroundColor: \"RGBA(0, 0, 0, 1)\",\n        aboutTextColor: \"RGBA(255, 255, 255, 0.1)\",\n        contactTextColor: \"RGBA(255, 255, 255, 0.1)\",\n        projectsTextColor: \"#ffffff\"\n      });\n    };\n    projectText.onmouseleave = () => {\n      this.setState({\n        backgroundColor: \"#ffffff\",\n        aboutTextColor: \"#000000\",\n        projectsTextColor: \"#000000\",\n        contactTextColor: \"#000000\"\n      });\n    };\n    aboutText.onmouseover = () => {\n      this.setState({\n        backgroundColor: \"RGBA(0, 0, 0, 1)\",\n        projectsTextColor: \"RGBA(255, 255, 255, 0.1)\",\n        aboutTextColor: \"#ffffff\",\n        contactTextColor: \"RGBA(255, 255, 255, 0.1)\"\n      });\n    };\n    aboutText.onmouseleave = () => {\n      this.setState({\n        backgroundColor: \"#ffffff\",\n        aboutTextColor: \"#000000\",\n        projectsTextColor: \"#000000\",\n        contactTextColor: \"#000000\"\n      });\n    };\n    contactText.onmouseover = () => {\n      this.setState({\n        backgroundColor: \"RGBA(0, 0, 0, 1)\",\n        projectsTextColor: \"RGBA(255, 255, 255, 0.1)\",\n        aboutTextColor: \"RGBA(255, 255, 255, 0.1)\",\n        contactTextColor: \"#ffffff\"\n      });\n    };\n    contactText.onmouseleave = () => {\n      this.setState({\n        backgroundColor: \"#ffffff\",\n        projectsTextColor: \"#000000\",\n        aboutTextColor: \"#000000\",\n        contactTextColor: \"#000000\"\n      });\n    };\n  };\n  render() {\n    return (\n      <div\n        id=\"homeroot\"\n        style={{ backgroundColor: this.state.backgroundColor }}\n      >\n        <div className=\"container-fluid\" style={{ height: \"100%\" }}>\n          <div className=\"row align-items-center row-division extra-large-PressStart \">\n            <div className=\"col\" style={{ textAlign: \"start\" }}>\n              <NavLink to=\"/project\">\n                <div\n                  className=\"buttonText\"\n                  id=\"projectText\"\n                  style={{ color: this.state.projectsTextColor }}\n                >\n                  PROJECTS\n                </div>\n              </NavLink>\n            </div>\n          </div>\n          <div className=\"row align-items-center row-division extra-large-PressStart \">\n            <div className=\"col\" style={{ textAlign: \"center\" }}>\n              <NavLink to=\"/about\">\n                <div\n                  className=\"buttonText\"\n                  id=\"aboutText\"\n                  style={{ color: this.state.aboutTextColor }}\n                >\n                  ABOUT\n                </div>\n              </NavLink>\n            </div>\n          </div>\n          <div className=\"row align-items-center row-division extra-large-PressStart \">\n            <div className=\"col\" style={{ textAlign: \"end\" }}>\n              <NavLink to=\"/contact\">\n                <div\n                  className=\"buttonText\"\n                  id=\"contactText\"\n                  style={{ color: this.state.contactTextColor }}\n                >\n                  CONTACT\n                </div>\n              </NavLink>\n            </div>\n          </div>\n          <div className=\"row align-items-end footer-row\">\n            <div className=\"col\" style={{ textAlign: \"end\" }}>\n              Jainam Shah\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomeScreen;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\nclass AboutScreen extends Component {\n  state = {};\n  render() {\n    return (\n      <div id=\"aboutRoot\" className=\"container\">\n        <div\n          style={{ height: \"46vh\", marginTop: \"27vh\", marginBottom: \"27vh\" }}\n        >\n          <div className=\"centerAlignedText extra-large-PressStart\" style={{}}>\n            <div className=\"col\">Hello, I'm Jainam</div>\n          </div>\n\n          <div\n            className=\"row  PressStart\"\n            style={{ fontSize: \"calc(15px + 5%)\", marginTop: \"6vh\" }}\n          >\n            <div className=\"col\" style={{}}>\n              // I <br />\n              // code <br />\n              // live in SF, CA\n              <br />\n              // study CS @ SFSU\n              <br />\n              // am interested in\n              <br />\n              // Web Dev & Computer Vision\n            </div>\n            <div className=\"col\" style={{}}>\n              <div style={{ marginBottom: \"5px\", marginTop: \"5px\" }}>\n                My Academics <br />\n              </div>\n              <div style={{ marginBottom: \"5px\", marginTop: \"5px\" }}>\n                My Experiences\n                <br />\n              </div>\n              <div style={{ marginBottom: \"5px\", marginTop: \"5px\" }}>\n                My Resume\n                <br />\n              </div>\n              <div style={{ marginBottom: \"5px\", marginTop: \"5px\" }}>\n                More about my personal life\n                <br />\n              </div>\n              <div style={{ marginBottom: \"5px\", marginTop: \"5px\" }}>\n                Next: Projects\n                <br />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AboutScreen;\n\n//  {/* thinsg to display:\n// //               who am i,\n// //               where im from,\n// //               what are my interests,\n// //               what have i studied\n// //               where have i worked\n// //               */}\n","import React, { Component } from \"react\";\nclass ProjectScreen extends Component {\n  state = {};\n  render() {\n    return <div>project</div>;\n  }\n}\n\nexport default ProjectScreen;\n","import React, { Component } from \"react\";\nclass ContactScreen extends Component {\n  state = {};\n  render() {\n    return <div>contact</div>;\n  }\n}\n\nexport default ContactScreen;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { TransitionGroup } from \"react-transition-group\";\nimport HomeScreen from \"./screens/homescreen\";\nimport AboutScreen from \"./screens/aboutscreen\";\nimport ProjectScreen from \"./screens/projectscreen\";\nimport ContactScreen from \"./screens/contactscreen\";\n\nclass App extends React.Component {\n  state = {};\n\n  render() {\n    return (\n      <Router>\n        <TransitionGroup>\n          <Switch>\n            <Route path=\"/about\">\n              <AboutScreen />\n            </Route>\n            <Route path=\"/project\">\n              <ProjectScreen />\n            </Route>\n            <Route path=\"/contact\">\n              <ContactScreen />\n            </Route>\n            <Route path=\"/\">\n              <HomeScreen />\n            </Route>\n          </Switch>\n        </TransitionGroup>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}